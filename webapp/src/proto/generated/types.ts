// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v3.20.3
// source: types.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "";

export enum Constants {
  CONSTANT_UNSPECIFIED = 0,
  /** START_TEMPERATURE - Initial temperature for all profiles */
  START_TEMPERATURE = 30,
  /** MAX_REFLOW_PROFILES - Static sizes for repeated/maps */
  MAX_REFLOW_PROFILES = 10,
  MAX_REFLOW_SEGMENTS = 10,
  MAX_HISTORY_CHUNK = 100,
  /** HISTORY_ID_SENSOR_BAKE_MODE - History IDs for tasks (selected to not conflict with profile IDs) */
  HISTORY_ID_SENSOR_BAKE_MODE = 4000,
  HISTORY_ID_ADRC_TEST_MODE = 4001,
  HISTORY_ID_STEP_RESPONSE = 4002,
  UNRECOGNIZED = -1,
}

export function constantsFromJSON(object: any): Constants {
  switch (object) {
    case 0:
    case "CONSTANT_UNSPECIFIED":
      return Constants.CONSTANT_UNSPECIFIED;
    case 30:
    case "START_TEMPERATURE":
      return Constants.START_TEMPERATURE;
    case 10:
    case "MAX_REFLOW_PROFILES":
      return Constants.MAX_REFLOW_PROFILES;
    case 10:
    case "MAX_REFLOW_SEGMENTS":
      return Constants.MAX_REFLOW_SEGMENTS;
    case 100:
    case "MAX_HISTORY_CHUNK":
      return Constants.MAX_HISTORY_CHUNK;
    case 4000:
    case "HISTORY_ID_SENSOR_BAKE_MODE":
      return Constants.HISTORY_ID_SENSOR_BAKE_MODE;
    case 4001:
    case "HISTORY_ID_ADRC_TEST_MODE":
      return Constants.HISTORY_ID_ADRC_TEST_MODE;
    case 4002:
    case "HISTORY_ID_STEP_RESPONSE":
      return Constants.HISTORY_ID_STEP_RESPONSE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Constants.UNRECOGNIZED;
  }
}

export function constantsToJSON(object: Constants): string {
  switch (object) {
    case Constants.CONSTANT_UNSPECIFIED:
      return "CONSTANT_UNSPECIFIED";
    case Constants.START_TEMPERATURE:
      return "START_TEMPERATURE";
    case Constants.MAX_REFLOW_PROFILES:
      return "MAX_REFLOW_PROFILES";
    case Constants.MAX_REFLOW_SEGMENTS:
      return "MAX_REFLOW_SEGMENTS";
    case Constants.MAX_HISTORY_CHUNK:
      return "MAX_HISTORY_CHUNK";
    case Constants.HISTORY_ID_SENSOR_BAKE_MODE:
      return "HISTORY_ID_SENSOR_BAKE_MODE";
    case Constants.HISTORY_ID_ADRC_TEST_MODE:
      return "HISTORY_ID_ADRC_TEST_MODE";
    case Constants.HISTORY_ID_STEP_RESPONSE:
      return "HISTORY_ID_STEP_RESPONSE";
    case Constants.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum HeaterType {
  /** MCH - Ceramic with tungsten wire inside */
  MCH = 0,
  /** PCB - Aluminum PCB with copper trace */
  PCB = 1,
  UNRECOGNIZED = -1,
}

export function heaterTypeFromJSON(object: any): HeaterType {
  switch (object) {
    case 0:
    case "MCH":
      return HeaterType.MCH;
    case 1:
    case "PCB":
      return HeaterType.PCB;
    case -1:
    case "UNRECOGNIZED":
    default:
      return HeaterType.UNRECOGNIZED;
  }
}

export function heaterTypeToJSON(object: HeaterType): string {
  switch (object) {
    case HeaterType.MCH:
      return "MCH";
    case HeaterType.PCB:
      return "PCB";
    case HeaterType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum SensorType {
  /** PT100 - Standalone RTD */
  PT100 = 0,
  /** Indirect - Calculated via heater's TCR (copper: 0.39%/°C, tungsten: 0.45%/°C) */
  Indirect = 1,
  UNRECOGNIZED = -1,
}

export function sensorTypeFromJSON(object: any): SensorType {
  switch (object) {
    case 0:
    case "PT100":
      return SensorType.PT100;
    case 1:
    case "Indirect":
      return SensorType.Indirect;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SensorType.UNRECOGNIZED;
  }
}

export function sensorTypeToJSON(object: SensorType): string {
  switch (object) {
    case SensorType.PT100:
      return "PT100";
    case SensorType.Indirect:
      return "Indirect";
    case SensorType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum HeadStatus {
  HeadDisconnected = 0,
  HeadInitializing = 1,
  HeadConnected = 2,
  HeadError = 3,
  UNRECOGNIZED = -1,
}

export function headStatusFromJSON(object: any): HeadStatus {
  switch (object) {
    case 0:
    case "HeadDisconnected":
      return HeadStatus.HeadDisconnected;
    case 1:
    case "HeadInitializing":
      return HeadStatus.HeadInitializing;
    case 2:
    case "HeadConnected":
      return HeadStatus.HeadConnected;
    case 3:
    case "HeadError":
      return HeadStatus.HeadError;
    case -1:
    case "UNRECOGNIZED":
    default:
      return HeadStatus.UNRECOGNIZED;
  }
}

export function headStatusToJSON(object: HeadStatus): string {
  switch (object) {
    case HeadStatus.HeadDisconnected:
      return "HeadDisconnected";
    case HeadStatus.HeadInitializing:
      return "HeadInitializing";
    case HeadStatus.HeadConnected:
      return "HeadConnected";
    case HeadStatus.HeadError:
      return "HeadError";
    case HeadStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PowerStatus {
  PwrOff = 0,
  PwrInitializing = 1,
  /** PwrTransition - PC contract change */
  PwrTransition = 2,
  PwrOK = 3,
  PwrFailure = 4,
  UNRECOGNIZED = -1,
}

export function powerStatusFromJSON(object: any): PowerStatus {
  switch (object) {
    case 0:
    case "PwrOff":
      return PowerStatus.PwrOff;
    case 1:
    case "PwrInitializing":
      return PowerStatus.PwrInitializing;
    case 2:
    case "PwrTransition":
      return PowerStatus.PwrTransition;
    case 3:
    case "PwrOK":
      return PowerStatus.PwrOK;
    case 4:
    case "PwrFailure":
      return PowerStatus.PwrFailure;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PowerStatus.UNRECOGNIZED;
  }
}

export function powerStatusToJSON(object: PowerStatus): string {
  switch (object) {
    case PowerStatus.PwrOff:
      return "PwrOff";
    case PowerStatus.PwrInitializing:
      return "PwrInitializing";
    case PowerStatus.PwrTransition:
      return "PwrTransition";
    case PowerStatus.PwrOK:
      return "PwrOK";
    case PowerStatus.PwrFailure:
      return "PwrFailure";
    case PowerStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum DeviceHealthStatus {
  DevNotReady = 0,
  DevOK = 1,
  DevFailure = 2,
  UNRECOGNIZED = -1,
}

export function deviceHealthStatusFromJSON(object: any): DeviceHealthStatus {
  switch (object) {
    case 0:
    case "DevNotReady":
      return DeviceHealthStatus.DevNotReady;
    case 1:
    case "DevOK":
      return DeviceHealthStatus.DevOK;
    case 2:
    case "DevFailure":
      return DeviceHealthStatus.DevFailure;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DeviceHealthStatus.UNRECOGNIZED;
  }
}

export function deviceHealthStatusToJSON(object: DeviceHealthStatus): string {
  switch (object) {
    case DeviceHealthStatus.DevNotReady:
      return "DevNotReady";
    case DeviceHealthStatus.DevOK:
      return "DevOK";
    case DeviceHealthStatus.DevFailure:
      return "DevFailure";
    case DeviceHealthStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum DeviceActivityStatus {
  Idle = 0,
  Reflow = 1,
  SensorBake = 2,
  AdrcTest = 3,
  StepResponse = 4,
  Bonding = 5,
  UNRECOGNIZED = -1,
}

export function deviceActivityStatusFromJSON(object: any): DeviceActivityStatus {
  switch (object) {
    case 0:
    case "Idle":
      return DeviceActivityStatus.Idle;
    case 1:
    case "Reflow":
      return DeviceActivityStatus.Reflow;
    case 2:
    case "SensorBake":
      return DeviceActivityStatus.SensorBake;
    case 3:
    case "AdrcTest":
      return DeviceActivityStatus.AdrcTest;
    case 4:
    case "StepResponse":
      return DeviceActivityStatus.StepResponse;
    case 5:
    case "Bonding":
      return DeviceActivityStatus.Bonding;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DeviceActivityStatus.UNRECOGNIZED;
  }
}

export function deviceActivityStatusToJSON(object: DeviceActivityStatus): string {
  switch (object) {
    case DeviceActivityStatus.Idle:
      return "Idle";
    case DeviceActivityStatus.Reflow:
      return "Reflow";
    case DeviceActivityStatus.SensorBake:
      return "SensorBake";
    case DeviceActivityStatus.AdrcTest:
      return "AdrcTest";
    case DeviceActivityStatus.StepResponse:
      return "StepResponse";
    case DeviceActivityStatus.Bonding:
      return "Bonding";
    case DeviceActivityStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Segment {
  /** Target temperature in Celsius */
  target: number;
  /** Duration in seconds */
  duration: number;
}

export interface Profile {
  /** Unique profile identifier */
  id: number;
  /** Profile name */
  name: string;
  /** Temperature segments sequence */
  segments: Segment[];
}

export interface ProfilesData {
  /** Available profiles */
  items: Profile[];
  /** Currently selected profile id */
  selectedId: number;
}

export interface Point {
  x: number;
  y: number;
}

export interface HistoryChunk {
  type: number;
  version: number;
  data: Point[];
}

export interface HeadParams {
  /** Temperature sensor calibration data */
  sensor_p0_at: number;
  sensor_p0_value: number;
  sensor_p1_at: number;
  sensor_p1_value: number;
  /** System response time (when temperature reaches 63% of final value) */
  adrc_response: number;
  /** Scale. Max derivative / power */
  adrc_b0: number;
  /**
   * ω_observer = N / τ. Usually 3..10
   * 5 is good for the start. Increase until oscillates, then back 10-20%.
   */
  adrc_N: number;
  /**
   * ω_controller = ω_observer / M. Usually 2..5
   * 3 is a good for the start. Probably, changes not required.
   */
  adrc_M: number;
}

export interface DeviceInfo {
  /** Main */
  health: DeviceHealthStatus;
  activity: DeviceActivityStatus;
  power: PowerStatus;
  head: HeadStatus;
  temperature_x10: number;
  /** Debug info */
  peak_mv: number;
  peak_ma: number;
  /** PWM duty cycle [0..1000] */
  duty_x1000: number;
  resistance_mohms: number;
  /**
   * Max possible power in mW, for current heater resistance
   * at current PD profile
   */
  max_mw: number;
}

function createBaseSegment(): Segment {
  return { target: 0, duration: 0 };
}

export const Segment: MessageFns<Segment> = {
  encode(message: Segment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.target !== 0) {
      writer.uint32(8).int32(message.target);
    }
    if (message.duration !== 0) {
      writer.uint32(16).int32(message.duration);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Segment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSegment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.target = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.duration = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Segment {
    return {
      target: isSet(object.target) ? globalThis.Number(object.target) : 0,
      duration: isSet(object.duration) ? globalThis.Number(object.duration) : 0,
    };
  },

  toJSON(message: Segment): unknown {
    const obj: any = {};
    if (message.target !== 0) {
      obj.target = Math.round(message.target);
    }
    if (message.duration !== 0) {
      obj.duration = Math.round(message.duration);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Segment>, I>>(base?: I): Segment {
    return Segment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Segment>, I>>(object: I): Segment {
    const message = createBaseSegment();
    message.target = object.target ?? 0;
    message.duration = object.duration ?? 0;
    return message;
  },
};

function createBaseProfile(): Profile {
  return { id: 0, name: "", segments: [] };
}

export const Profile: MessageFns<Profile> = {
  encode(message: Profile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    for (const v of message.segments) {
      Segment.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Profile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.segments.push(Segment.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Profile {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      segments: globalThis.Array.isArray(object?.segments) ? object.segments.map((e: any) => Segment.fromJSON(e)) : [],
    };
  },

  toJSON(message: Profile): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.segments?.length) {
      obj.segments = message.segments.map((e) => Segment.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Profile>, I>>(base?: I): Profile {
    return Profile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Profile>, I>>(object: I): Profile {
    const message = createBaseProfile();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.segments = object.segments?.map((e) => Segment.fromPartial(e)) || [];
    return message;
  },
};

function createBaseProfilesData(): ProfilesData {
  return { items: [], selectedId: 0 };
}

export const ProfilesData: MessageFns<ProfilesData> = {
  encode(message: ProfilesData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.items) {
      Profile.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.selectedId !== 0) {
      writer.uint32(16).int32(message.selectedId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProfilesData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProfilesData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.items.push(Profile.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.selectedId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProfilesData {
    return {
      items: globalThis.Array.isArray(object?.items) ? object.items.map((e: any) => Profile.fromJSON(e)) : [],
      selectedId: isSet(object.selectedId) ? globalThis.Number(object.selectedId) : 0,
    };
  },

  toJSON(message: ProfilesData): unknown {
    const obj: any = {};
    if (message.items?.length) {
      obj.items = message.items.map((e) => Profile.toJSON(e));
    }
    if (message.selectedId !== 0) {
      obj.selectedId = Math.round(message.selectedId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProfilesData>, I>>(base?: I): ProfilesData {
    return ProfilesData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProfilesData>, I>>(object: I): ProfilesData {
    const message = createBaseProfilesData();
    message.items = object.items?.map((e) => Profile.fromPartial(e)) || [];
    message.selectedId = object.selectedId ?? 0;
    return message;
  },
};

function createBasePoint(): Point {
  return { x: 0, y: 0 };
}

export const Point: MessageFns<Point> = {
  encode(message: Point, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.x !== 0) {
      writer.uint32(13).float(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(21).float(message.y);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Point {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 13) {
            break;
          }

          message.x = reader.float();
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.y = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Point {
    return {
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
    };
  },

  toJSON(message: Point): unknown {
    const obj: any = {};
    if (message.x !== 0) {
      obj.x = message.x;
    }
    if (message.y !== 0) {
      obj.y = message.y;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Point>, I>>(base?: I): Point {
    return Point.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Point>, I>>(object: I): Point {
    const message = createBasePoint();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    return message;
  },
};

function createBaseHistoryChunk(): HistoryChunk {
  return { type: 0, version: 0, data: [] };
}

export const HistoryChunk: MessageFns<HistoryChunk> = {
  encode(message: HistoryChunk, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.version !== 0) {
      writer.uint32(16).int32(message.version);
    }
    for (const v of message.data) {
      Point.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HistoryChunk {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHistoryChunk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.version = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data.push(Point.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HistoryChunk {
    return {
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
      data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => Point.fromJSON(e)) : [],
    };
  },

  toJSON(message: HistoryChunk): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.data?.length) {
      obj.data = message.data.map((e) => Point.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HistoryChunk>, I>>(base?: I): HistoryChunk {
    return HistoryChunk.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HistoryChunk>, I>>(object: I): HistoryChunk {
    const message = createBaseHistoryChunk();
    message.type = object.type ?? 0;
    message.version = object.version ?? 0;
    message.data = object.data?.map((e) => Point.fromPartial(e)) || [];
    return message;
  },
};

function createBaseHeadParams(): HeadParams {
  return {
    sensor_p0_at: 0,
    sensor_p0_value: 0,
    sensor_p1_at: 0,
    sensor_p1_value: 0,
    adrc_response: 0,
    adrc_b0: 0,
    adrc_N: 0,
    adrc_M: 0,
  };
}

export const HeadParams: MessageFns<HeadParams> = {
  encode(message: HeadParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sensor_p0_at !== 0) {
      writer.uint32(13).float(message.sensor_p0_at);
    }
    if (message.sensor_p0_value !== 0) {
      writer.uint32(21).float(message.sensor_p0_value);
    }
    if (message.sensor_p1_at !== 0) {
      writer.uint32(29).float(message.sensor_p1_at);
    }
    if (message.sensor_p1_value !== 0) {
      writer.uint32(37).float(message.sensor_p1_value);
    }
    if (message.adrc_response !== 0) {
      writer.uint32(45).float(message.adrc_response);
    }
    if (message.adrc_b0 !== 0) {
      writer.uint32(53).float(message.adrc_b0);
    }
    if (message.adrc_N !== 0) {
      writer.uint32(61).float(message.adrc_N);
    }
    if (message.adrc_M !== 0) {
      writer.uint32(69).float(message.adrc_M);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HeadParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHeadParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 13) {
            break;
          }

          message.sensor_p0_at = reader.float();
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.sensor_p0_value = reader.float();
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.sensor_p1_at = reader.float();
          continue;
        }
        case 4: {
          if (tag !== 37) {
            break;
          }

          message.sensor_p1_value = reader.float();
          continue;
        }
        case 5: {
          if (tag !== 45) {
            break;
          }

          message.adrc_response = reader.float();
          continue;
        }
        case 6: {
          if (tag !== 53) {
            break;
          }

          message.adrc_b0 = reader.float();
          continue;
        }
        case 7: {
          if (tag !== 61) {
            break;
          }

          message.adrc_N = reader.float();
          continue;
        }
        case 8: {
          if (tag !== 69) {
            break;
          }

          message.adrc_M = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HeadParams {
    return {
      sensor_p0_at: isSet(object.sensor_p0_at) ? globalThis.Number(object.sensor_p0_at) : 0,
      sensor_p0_value: isSet(object.sensor_p0_value) ? globalThis.Number(object.sensor_p0_value) : 0,
      sensor_p1_at: isSet(object.sensor_p1_at) ? globalThis.Number(object.sensor_p1_at) : 0,
      sensor_p1_value: isSet(object.sensor_p1_value) ? globalThis.Number(object.sensor_p1_value) : 0,
      adrc_response: isSet(object.adrc_response) ? globalThis.Number(object.adrc_response) : 0,
      adrc_b0: isSet(object.adrc_b0) ? globalThis.Number(object.adrc_b0) : 0,
      adrc_N: isSet(object.adrc_N) ? globalThis.Number(object.adrc_N) : 0,
      adrc_M: isSet(object.adrc_M) ? globalThis.Number(object.adrc_M) : 0,
    };
  },

  toJSON(message: HeadParams): unknown {
    const obj: any = {};
    if (message.sensor_p0_at !== 0) {
      obj.sensor_p0_at = message.sensor_p0_at;
    }
    if (message.sensor_p0_value !== 0) {
      obj.sensor_p0_value = message.sensor_p0_value;
    }
    if (message.sensor_p1_at !== 0) {
      obj.sensor_p1_at = message.sensor_p1_at;
    }
    if (message.sensor_p1_value !== 0) {
      obj.sensor_p1_value = message.sensor_p1_value;
    }
    if (message.adrc_response !== 0) {
      obj.adrc_response = message.adrc_response;
    }
    if (message.adrc_b0 !== 0) {
      obj.adrc_b0 = message.adrc_b0;
    }
    if (message.adrc_N !== 0) {
      obj.adrc_N = message.adrc_N;
    }
    if (message.adrc_M !== 0) {
      obj.adrc_M = message.adrc_M;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HeadParams>, I>>(base?: I): HeadParams {
    return HeadParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HeadParams>, I>>(object: I): HeadParams {
    const message = createBaseHeadParams();
    message.sensor_p0_at = object.sensor_p0_at ?? 0;
    message.sensor_p0_value = object.sensor_p0_value ?? 0;
    message.sensor_p1_at = object.sensor_p1_at ?? 0;
    message.sensor_p1_value = object.sensor_p1_value ?? 0;
    message.adrc_response = object.adrc_response ?? 0;
    message.adrc_b0 = object.adrc_b0 ?? 0;
    message.adrc_N = object.adrc_N ?? 0;
    message.adrc_M = object.adrc_M ?? 0;
    return message;
  },
};

function createBaseDeviceInfo(): DeviceInfo {
  return {
    health: 0,
    activity: 0,
    power: 0,
    head: 0,
    temperature_x10: 0,
    peak_mv: 0,
    peak_ma: 0,
    duty_x1000: 0,
    resistance_mohms: 0,
    max_mw: 0,
  };
}

export const DeviceInfo: MessageFns<DeviceInfo> = {
  encode(message: DeviceInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.health !== 0) {
      writer.uint32(8).int32(message.health);
    }
    if (message.activity !== 0) {
      writer.uint32(16).int32(message.activity);
    }
    if (message.power !== 0) {
      writer.uint32(24).int32(message.power);
    }
    if (message.head !== 0) {
      writer.uint32(32).int32(message.head);
    }
    if (message.temperature_x10 !== 0) {
      writer.uint32(40).int32(message.temperature_x10);
    }
    if (message.peak_mv !== 0) {
      writer.uint32(48).uint32(message.peak_mv);
    }
    if (message.peak_ma !== 0) {
      writer.uint32(56).uint32(message.peak_ma);
    }
    if (message.duty_x1000 !== 0) {
      writer.uint32(64).uint32(message.duty_x1000);
    }
    if (message.resistance_mohms !== 0) {
      writer.uint32(72).uint32(message.resistance_mohms);
    }
    if (message.max_mw !== 0) {
      writer.uint32(80).uint32(message.max_mw);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeviceInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.health = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.activity = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.power = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.head = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.temperature_x10 = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.peak_mv = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.peak_ma = reader.uint32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.duty_x1000 = reader.uint32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.resistance_mohms = reader.uint32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.max_mw = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceInfo {
    return {
      health: isSet(object.health) ? deviceHealthStatusFromJSON(object.health) : 0,
      activity: isSet(object.activity) ? deviceActivityStatusFromJSON(object.activity) : 0,
      power: isSet(object.power) ? powerStatusFromJSON(object.power) : 0,
      head: isSet(object.head) ? headStatusFromJSON(object.head) : 0,
      temperature_x10: isSet(object.temperature_x10) ? globalThis.Number(object.temperature_x10) : 0,
      peak_mv: isSet(object.peak_mv) ? globalThis.Number(object.peak_mv) : 0,
      peak_ma: isSet(object.peak_ma) ? globalThis.Number(object.peak_ma) : 0,
      duty_x1000: isSet(object.duty_x1000) ? globalThis.Number(object.duty_x1000) : 0,
      resistance_mohms: isSet(object.resistance_mohms) ? globalThis.Number(object.resistance_mohms) : 0,
      max_mw: isSet(object.max_mw) ? globalThis.Number(object.max_mw) : 0,
    };
  },

  toJSON(message: DeviceInfo): unknown {
    const obj: any = {};
    if (message.health !== 0) {
      obj.health = deviceHealthStatusToJSON(message.health);
    }
    if (message.activity !== 0) {
      obj.activity = deviceActivityStatusToJSON(message.activity);
    }
    if (message.power !== 0) {
      obj.power = powerStatusToJSON(message.power);
    }
    if (message.head !== 0) {
      obj.head = headStatusToJSON(message.head);
    }
    if (message.temperature_x10 !== 0) {
      obj.temperature_x10 = Math.round(message.temperature_x10);
    }
    if (message.peak_mv !== 0) {
      obj.peak_mv = Math.round(message.peak_mv);
    }
    if (message.peak_ma !== 0) {
      obj.peak_ma = Math.round(message.peak_ma);
    }
    if (message.duty_x1000 !== 0) {
      obj.duty_x1000 = Math.round(message.duty_x1000);
    }
    if (message.resistance_mohms !== 0) {
      obj.resistance_mohms = Math.round(message.resistance_mohms);
    }
    if (message.max_mw !== 0) {
      obj.max_mw = Math.round(message.max_mw);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceInfo>, I>>(base?: I): DeviceInfo {
    return DeviceInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceInfo>, I>>(object: I): DeviceInfo {
    const message = createBaseDeviceInfo();
    message.health = object.health ?? 0;
    message.activity = object.activity ?? 0;
    message.power = object.power ?? 0;
    message.head = object.head ?? 0;
    message.temperature_x10 = object.temperature_x10 ?? 0;
    message.peak_mv = object.peak_mv ?? 0;
    message.peak_ma = object.peak_ma ?? 0;
    message.duty_x1000 = object.duty_x1000 ?? 0;
    message.resistance_mohms = object.resistance_mohms ?? 0;
    message.max_mw = object.max_mw ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
