/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9 */

#ifndef PB_TYPES_PB_H_INCLUDED
#define PB_TYPES_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _Constants {
    Constants_CONSTANT_UNSPECIFIED = 0,
    /* Initial temperature for all profiles */
    Constants_START_TEMPERATURE = 30,
    /* Static sizes for repeated/maps */
    Constants_MAX_REFLOW_PROFILES = 10
} Constants;

typedef enum _DeviceState {
    DeviceState_DEVICE_STATE_UNSPECIFIED = 0,
    DeviceState_Idle = 1,
    DeviceState_Reflow = 2,
    DeviceState_SensorBake = 3,
    DeviceState_AdrcTest = 4,
    DeviceState_StepResponse = 5
} DeviceState;

/* Struct definitions */
typedef struct _Segment {
    /* Target temperature in Celsius */
    int32_t target;
    /* Duration in seconds */
    int32_t duration;
} Segment;

typedef struct _Profile {
    /* Unique profile identifier */
    int32_t id;
    /* Profile name */
    char name[51];
    /* Temperature segments sequence */
    pb_size_t segments_count;
    Segment segments[10];
} Profile;

typedef struct _ProfilesData {
    /* Available profiles */
    pb_size_t items_count;
    Profile items[10];
    /* Currently selected profile id */
    int32_t selectedId;
} ProfilesData;

typedef struct _Point {
    int32_t x;
    int32_t y;
} Point;

typedef struct _HistoryChunk {
    int32_t type;
    int32_t version;
    pb_size_t data_count;
    Point data[100];
} HistoryChunk;

typedef struct _AdrcParams {
    /* System response time (when temperature reaches 63% of final value) */
    float response;
    /* Scale. Max derivative / power */
    float b0;
    /* ω_observer = N / τ. Usually 3..10
 5 is good for the start. Increase until oscillates, then back 10-20%. */
    float N;
    /* ω_controller = ω_observer / M. Usually 2..5
 3 is a good for the start. Probably, changes not required. */
    float M;
} AdrcParams;

typedef struct _SensorCalibrationPoint {
    /* Real temperature */
    float temperature;
    /* Sensor voltage */
    float sensor_value;
} SensorCalibrationPoint;

typedef struct _SensorParams_PointsEntry {
    uint32_t key;
    bool has_value;
    SensorCalibrationPoint value;
} SensorParams_PointsEntry;

typedef struct _SensorParams {
    pb_size_t points_count;
    SensorParams_PointsEntry points[2];
} SensorParams;

typedef struct _HeaterConfigs_AdrcEntry {
    uint32_t key;
    bool has_value;
    AdrcParams value;
} HeaterConfigs_AdrcEntry;

typedef struct _HeaterConfigs_SensorEntry {
    uint32_t key;
    bool has_value;
    SensorParams value;
} HeaterConfigs_SensorEntry;

typedef struct _HeaterConfigs {
    pb_size_t adrc_count;
    HeaterConfigs_AdrcEntry adrc[4];
    pb_size_t sensor_count;
    HeaterConfigs_SensorEntry sensor[4];
} HeaterConfigs;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _Constants_MIN Constants_CONSTANT_UNSPECIFIED
#define _Constants_MAX Constants_START_TEMPERATURE
#define _Constants_ARRAYSIZE ((Constants)(Constants_START_TEMPERATURE+1))

#define _DeviceState_MIN DeviceState_DEVICE_STATE_UNSPECIFIED
#define _DeviceState_MAX DeviceState_StepResponse
#define _DeviceState_ARRAYSIZE ((DeviceState)(DeviceState_StepResponse+1))














/* Initializer values for message structs */
#define Segment_init_default                     {0, 0}
#define Profile_init_default                     {0, "", 0, {Segment_init_default, Segment_init_default, Segment_init_default, Segment_init_default, Segment_init_default, Segment_init_default, Segment_init_default, Segment_init_default, Segment_init_default, Segment_init_default}}
#define ProfilesData_init_default                {0, {Profile_init_default, Profile_init_default, Profile_init_default, Profile_init_default, Profile_init_default, Profile_init_default, Profile_init_default, Profile_init_default, Profile_init_default, Profile_init_default}, 0}
#define Point_init_default                       {0, 0}
#define HistoryChunk_init_default                {0, 0, 0, {Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default}}
#define AdrcParams_init_default                  {0, 0, 0, 0}
#define SensorCalibrationPoint_init_default      {0, 0}
#define SensorParams_init_default                {0, {SensorParams_PointsEntry_init_default, SensorParams_PointsEntry_init_default}}
#define SensorParams_PointsEntry_init_default    {0, false, SensorCalibrationPoint_init_default}
#define HeaterConfigs_init_default               {0, {HeaterConfigs_AdrcEntry_init_default, HeaterConfigs_AdrcEntry_init_default, HeaterConfigs_AdrcEntry_init_default, HeaterConfigs_AdrcEntry_init_default}, 0, {HeaterConfigs_SensorEntry_init_default, HeaterConfigs_SensorEntry_init_default, HeaterConfigs_SensorEntry_init_default, HeaterConfigs_SensorEntry_init_default}}
#define HeaterConfigs_AdrcEntry_init_default     {0, false, AdrcParams_init_default}
#define HeaterConfigs_SensorEntry_init_default   {0, false, SensorParams_init_default}
#define Segment_init_zero                        {0, 0}
#define Profile_init_zero                        {0, "", 0, {Segment_init_zero, Segment_init_zero, Segment_init_zero, Segment_init_zero, Segment_init_zero, Segment_init_zero, Segment_init_zero, Segment_init_zero, Segment_init_zero, Segment_init_zero}}
#define ProfilesData_init_zero                   {0, {Profile_init_zero, Profile_init_zero, Profile_init_zero, Profile_init_zero, Profile_init_zero, Profile_init_zero, Profile_init_zero, Profile_init_zero, Profile_init_zero, Profile_init_zero}, 0}
#define Point_init_zero                          {0, 0}
#define HistoryChunk_init_zero                   {0, 0, 0, {Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero}}
#define AdrcParams_init_zero                     {0, 0, 0, 0}
#define SensorCalibrationPoint_init_zero         {0, 0}
#define SensorParams_init_zero                   {0, {SensorParams_PointsEntry_init_zero, SensorParams_PointsEntry_init_zero}}
#define SensorParams_PointsEntry_init_zero       {0, false, SensorCalibrationPoint_init_zero}
#define HeaterConfigs_init_zero                  {0, {HeaterConfigs_AdrcEntry_init_zero, HeaterConfigs_AdrcEntry_init_zero, HeaterConfigs_AdrcEntry_init_zero, HeaterConfigs_AdrcEntry_init_zero}, 0, {HeaterConfigs_SensorEntry_init_zero, HeaterConfigs_SensorEntry_init_zero, HeaterConfigs_SensorEntry_init_zero, HeaterConfigs_SensorEntry_init_zero}}
#define HeaterConfigs_AdrcEntry_init_zero        {0, false, AdrcParams_init_zero}
#define HeaterConfigs_SensorEntry_init_zero      {0, false, SensorParams_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define Segment_target_tag                       1
#define Segment_duration_tag                     2
#define Profile_id_tag                           1
#define Profile_name_tag                         2
#define Profile_segments_tag                     3
#define ProfilesData_items_tag                   1
#define ProfilesData_selectedId_tag              2
#define Point_x_tag                              1
#define Point_y_tag                              2
#define HistoryChunk_type_tag                    1
#define HistoryChunk_version_tag                 2
#define HistoryChunk_data_tag                    3
#define AdrcParams_response_tag                  1
#define AdrcParams_b0_tag                        2
#define AdrcParams_N_tag                         3
#define AdrcParams_M_tag                         4
#define SensorCalibrationPoint_temperature_tag   1
#define SensorCalibrationPoint_sensor_value_tag  2
#define SensorParams_PointsEntry_key_tag         1
#define SensorParams_PointsEntry_value_tag       2
#define SensorParams_points_tag                  1
#define HeaterConfigs_AdrcEntry_key_tag          1
#define HeaterConfigs_AdrcEntry_value_tag        2
#define HeaterConfigs_SensorEntry_key_tag        1
#define HeaterConfigs_SensorEntry_value_tag      2
#define HeaterConfigs_adrc_tag                   1
#define HeaterConfigs_sensor_tag                 2

/* Struct field encoding specification for nanopb */
#define Segment_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    target,            1) \
X(a, STATIC,   SINGULAR, INT32,    duration,          2)
#define Segment_CALLBACK NULL
#define Segment_DEFAULT NULL

#define Profile_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    id,                1) \
X(a, STATIC,   SINGULAR, STRING,   name,              2) \
X(a, STATIC,   REPEATED, MESSAGE,  segments,          3)
#define Profile_CALLBACK NULL
#define Profile_DEFAULT NULL
#define Profile_segments_MSGTYPE Segment

#define ProfilesData_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, MESSAGE,  items,             1) \
X(a, STATIC,   SINGULAR, INT32,    selectedId,        2)
#define ProfilesData_CALLBACK NULL
#define ProfilesData_DEFAULT NULL
#define ProfilesData_items_MSGTYPE Profile

#define Point_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    x,                 1) \
X(a, STATIC,   SINGULAR, INT32,    y,                 2)
#define Point_CALLBACK NULL
#define Point_DEFAULT NULL

#define HistoryChunk_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    type,              1) \
X(a, STATIC,   SINGULAR, INT32,    version,           2) \
X(a, STATIC,   REPEATED, MESSAGE,  data,              3)
#define HistoryChunk_CALLBACK NULL
#define HistoryChunk_DEFAULT NULL
#define HistoryChunk_data_MSGTYPE Point

#define AdrcParams_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    response,          1) \
X(a, STATIC,   SINGULAR, FLOAT,    b0,                2) \
X(a, STATIC,   SINGULAR, FLOAT,    N,                 3) \
X(a, STATIC,   SINGULAR, FLOAT,    M,                 4)
#define AdrcParams_CALLBACK NULL
#define AdrcParams_DEFAULT NULL

#define SensorCalibrationPoint_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    temperature,       1) \
X(a, STATIC,   SINGULAR, FLOAT,    sensor_value,      2)
#define SensorCalibrationPoint_CALLBACK NULL
#define SensorCalibrationPoint_DEFAULT NULL

#define SensorParams_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, MESSAGE,  points,            1)
#define SensorParams_CALLBACK NULL
#define SensorParams_DEFAULT NULL
#define SensorParams_points_MSGTYPE SensorParams_PointsEntry

#define SensorParams_PointsEntry_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   key,               1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  value,             2)
#define SensorParams_PointsEntry_CALLBACK NULL
#define SensorParams_PointsEntry_DEFAULT NULL
#define SensorParams_PointsEntry_value_MSGTYPE SensorCalibrationPoint

#define HeaterConfigs_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, MESSAGE,  adrc,              1) \
X(a, STATIC,   REPEATED, MESSAGE,  sensor,            2)
#define HeaterConfigs_CALLBACK NULL
#define HeaterConfigs_DEFAULT NULL
#define HeaterConfigs_adrc_MSGTYPE HeaterConfigs_AdrcEntry
#define HeaterConfigs_sensor_MSGTYPE HeaterConfigs_SensorEntry

#define HeaterConfigs_AdrcEntry_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   key,               1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  value,             2)
#define HeaterConfigs_AdrcEntry_CALLBACK NULL
#define HeaterConfigs_AdrcEntry_DEFAULT NULL
#define HeaterConfigs_AdrcEntry_value_MSGTYPE AdrcParams

#define HeaterConfigs_SensorEntry_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   key,               1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  value,             2)
#define HeaterConfigs_SensorEntry_CALLBACK NULL
#define HeaterConfigs_SensorEntry_DEFAULT NULL
#define HeaterConfigs_SensorEntry_value_MSGTYPE SensorParams

extern const pb_msgdesc_t Segment_msg;
extern const pb_msgdesc_t Profile_msg;
extern const pb_msgdesc_t ProfilesData_msg;
extern const pb_msgdesc_t Point_msg;
extern const pb_msgdesc_t HistoryChunk_msg;
extern const pb_msgdesc_t AdrcParams_msg;
extern const pb_msgdesc_t SensorCalibrationPoint_msg;
extern const pb_msgdesc_t SensorParams_msg;
extern const pb_msgdesc_t SensorParams_PointsEntry_msg;
extern const pb_msgdesc_t HeaterConfigs_msg;
extern const pb_msgdesc_t HeaterConfigs_AdrcEntry_msg;
extern const pb_msgdesc_t HeaterConfigs_SensorEntry_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Segment_fields &Segment_msg
#define Profile_fields &Profile_msg
#define ProfilesData_fields &ProfilesData_msg
#define Point_fields &Point_msg
#define HistoryChunk_fields &HistoryChunk_msg
#define AdrcParams_fields &AdrcParams_msg
#define SensorCalibrationPoint_fields &SensorCalibrationPoint_msg
#define SensorParams_fields &SensorParams_msg
#define SensorParams_PointsEntry_fields &SensorParams_PointsEntry_msg
#define HeaterConfigs_fields &HeaterConfigs_msg
#define HeaterConfigs_AdrcEntry_fields &HeaterConfigs_AdrcEntry_msg
#define HeaterConfigs_SensorEntry_fields &HeaterConfigs_SensorEntry_msg

/* Maximum encoded size of messages (where known) */
#define AdrcParams_size                          20
#define HeaterConfigs_AdrcEntry_size             28
#define HeaterConfigs_SensorEntry_size           48
#define HeaterConfigs_size                       320
#define HistoryChunk_size                        2422
#define Point_size                               22
#define Profile_size                             303
#define ProfilesData_size                        3071
#define Segment_size                             22
#define SensorCalibrationPoint_size              10
#define SensorParams_PointsEntry_size            18
#define SensorParams_size                        40
#define TYPES_PB_H_MAX_SIZE                      ProfilesData_size

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
