/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9 */

#ifndef PB_TYPES_PB_H_INCLUDED
#define PB_TYPES_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _Constants {
    CONSTANT_UNSPECIFIED = 0,
    /* Initial temperature for all profiles */
    START_TEMPERATURE = 30,
    /* Static sizes for repeated/maps */
    MAX_REFLOW_PROFILES = 10,
    MAX_REFLOW_SEGMENTS = 10,
    MAX_HISTORY_CHUNK = 100,
    /* History IDs for tasks (selected to not conflict with profile IDs) */
    HISTORY_ID_SENSOR_BAKE_MODE = 4000,
    HISTORY_ID_ADRC_TEST_MODE = 4001,
    HISTORY_ID_STEP_RESPONSE = 4002
} Constants;

typedef enum _HeaterType {
    HeaterType_MCH = 0, /* Ceramic with tungsten wire inside */
    HeaterType_PCB = 1 /* Aluminum PCB with copper trace */
} HeaterType;

typedef enum _SensorType {
    SensorType_PT100 = 0, /* Standalone RTD */
    SensorType_Indirect = 1 /* Calculated via heater's TCR (copper: 0.39%/°C, tungsten: 0.45%/°C) */
} SensorType;

typedef enum _HeadStatus {
    HeadStatus_HeadDisconnected = 0,
    HeadStatus_HeadInitializing = 1,
    HeadStatus_HeadConnected = 2,
    HeadStatus_HeadError = 3
} HeadStatus;

typedef enum _PowerStatus {
    PowerStatus_PwrOff = 0,
    PowerStatus_PwrInitializing = 1,
    PowerStatus_PwrTransition = 2, /* PC contract change */
    PowerStatus_PwrOK = 3,
    PowerStatus_PwrFailure = 4
} PowerStatus;

typedef enum _DeviceHealthStatus {
    DeviceHealthStatus_DevNotReady = 0,
    DeviceHealthStatus_DevOK = 1,
    DeviceHealthStatus_DevFailure = 2
} DeviceHealthStatus;

typedef enum _DeviceActivityStatus {
    DeviceActivityStatus_Idle = 0,
    DeviceActivityStatus_Reflow = 1,
    DeviceActivityStatus_SensorBake = 2,
    DeviceActivityStatus_AdrcTest = 3,
    DeviceActivityStatus_StepResponse = 4,
    DeviceActivityStatus_Bonding = 5
} DeviceActivityStatus;

/* Struct definitions */
typedef struct _Segment {
    /* Target temperature in Celsius */
    int32_t target;
    /* Duration in seconds */
    int32_t duration;
} Segment;

typedef struct _Profile {
    /* Unique profile identifier */
    int32_t id;
    /* Profile name */
    char name[51];
    /* Temperature segments sequence */
    pb_size_t segments_count;
    Segment segments[10];
} Profile;

typedef struct _ProfilesData {
    /* Available profiles */
    pb_size_t items_count;
    Profile items[10];
    /* Currently selected profile id */
    int32_t selectedId;
} ProfilesData;

typedef struct _Point {
    float x;
    float y;
} Point;

typedef struct _HistoryChunk {
    int32_t type;
    int32_t version;
    pb_size_t data_count;
    Point data[100];
} HistoryChunk;

typedef struct _HeadParams {
    /* Temperature sensor calibration data */
    float sensor_p0_temperature;
    float sensor_p0_value;
    float sensor_p1_temperature;
    float sensor_p1_value;
    /* System response time (when temperature reaches 63% of final value) */
    float adrc_response;
    /* Scale. Max derivative / power */
    float adrc_b0;
    /* ω_observer = N / τ. Usually 3..10
 5 is good for the start. Increase until oscillates, then back 10-20%. */
    float adrc_N;
    /* ω_controller = ω_observer / M. Usually 2..5
 3 is a good for the start. Probably, changes not required. */
    float adrc_M;
} HeadParams;

typedef struct _DeviceInfo {
    /* Main */
    DeviceHealthStatus health;
    DeviceActivityStatus activity;
    PowerStatus power;
    HeadStatus head;
    float temperature;
    /* Debug info */
    float watts;
    float volts;
    float amperes;
    float max_watts;
    float duty_cycle; /* 0..1 */
    float resistance;
} DeviceInfo;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _Constants_MIN CONSTANT_UNSPECIFIED
#define _Constants_MAX HISTORY_ID_STEP_RESPONSE
#define _Constants_ARRAYSIZE ((Constants)(HISTORY_ID_STEP_RESPONSE+1))
#define Constants_CONSTANT_UNSPECIFIED CONSTANT_UNSPECIFIED
#define Constants_START_TEMPERATURE START_TEMPERATURE
#define Constants_MAX_REFLOW_PROFILES MAX_REFLOW_PROFILES
#define Constants_MAX_REFLOW_SEGMENTS MAX_REFLOW_SEGMENTS
#define Constants_MAX_HISTORY_CHUNK MAX_HISTORY_CHUNK
#define Constants_HISTORY_ID_SENSOR_BAKE_MODE HISTORY_ID_SENSOR_BAKE_MODE
#define Constants_HISTORY_ID_ADRC_TEST_MODE HISTORY_ID_ADRC_TEST_MODE
#define Constants_HISTORY_ID_STEP_RESPONSE HISTORY_ID_STEP_RESPONSE

#define _HeaterType_MIN HeaterType_MCH
#define _HeaterType_MAX HeaterType_PCB
#define _HeaterType_ARRAYSIZE ((HeaterType)(HeaterType_PCB+1))

#define _SensorType_MIN SensorType_PT100
#define _SensorType_MAX SensorType_Indirect
#define _SensorType_ARRAYSIZE ((SensorType)(SensorType_Indirect+1))

#define _HeadStatus_MIN HeadStatus_HeadDisconnected
#define _HeadStatus_MAX HeadStatus_HeadError
#define _HeadStatus_ARRAYSIZE ((HeadStatus)(HeadStatus_HeadError+1))

#define _PowerStatus_MIN PowerStatus_PwrOff
#define _PowerStatus_MAX PowerStatus_PwrFailure
#define _PowerStatus_ARRAYSIZE ((PowerStatus)(PowerStatus_PwrFailure+1))

#define _DeviceHealthStatus_MIN DeviceHealthStatus_DevNotReady
#define _DeviceHealthStatus_MAX DeviceHealthStatus_DevFailure
#define _DeviceHealthStatus_ARRAYSIZE ((DeviceHealthStatus)(DeviceHealthStatus_DevFailure+1))

#define _DeviceActivityStatus_MIN DeviceActivityStatus_Idle
#define _DeviceActivityStatus_MAX DeviceActivityStatus_Bonding
#define _DeviceActivityStatus_ARRAYSIZE ((DeviceActivityStatus)(DeviceActivityStatus_Bonding+1))







#define DeviceInfo_health_ENUMTYPE DeviceHealthStatus
#define DeviceInfo_activity_ENUMTYPE DeviceActivityStatus
#define DeviceInfo_power_ENUMTYPE PowerStatus
#define DeviceInfo_head_ENUMTYPE HeadStatus


/* Initializer values for message structs */
#define Segment_init_default                     {0, 0}
#define Profile_init_default                     {0, "", 0, {Segment_init_default, Segment_init_default, Segment_init_default, Segment_init_default, Segment_init_default, Segment_init_default, Segment_init_default, Segment_init_default, Segment_init_default, Segment_init_default}}
#define ProfilesData_init_default                {0, {Profile_init_default, Profile_init_default, Profile_init_default, Profile_init_default, Profile_init_default, Profile_init_default, Profile_init_default, Profile_init_default, Profile_init_default, Profile_init_default}, 0}
#define Point_init_default                       {0, 0}
#define HistoryChunk_init_default                {0, 0, 0, {Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default, Point_init_default}}
#define HeadParams_init_default                  {0, 0, 0, 0, 0, 0, 0, 0}
#define DeviceInfo_init_default                  {_DeviceHealthStatus_MIN, _DeviceActivityStatus_MIN, _PowerStatus_MIN, _HeadStatus_MIN, 0, 0, 0, 0, 0, 0, 0}
#define Segment_init_zero                        {0, 0}
#define Profile_init_zero                        {0, "", 0, {Segment_init_zero, Segment_init_zero, Segment_init_zero, Segment_init_zero, Segment_init_zero, Segment_init_zero, Segment_init_zero, Segment_init_zero, Segment_init_zero, Segment_init_zero}}
#define ProfilesData_init_zero                   {0, {Profile_init_zero, Profile_init_zero, Profile_init_zero, Profile_init_zero, Profile_init_zero, Profile_init_zero, Profile_init_zero, Profile_init_zero, Profile_init_zero, Profile_init_zero}, 0}
#define Point_init_zero                          {0, 0}
#define HistoryChunk_init_zero                   {0, 0, 0, {Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero, Point_init_zero}}
#define HeadParams_init_zero                     {0, 0, 0, 0, 0, 0, 0, 0}
#define DeviceInfo_init_zero                     {_DeviceHealthStatus_MIN, _DeviceActivityStatus_MIN, _PowerStatus_MIN, _HeadStatus_MIN, 0, 0, 0, 0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define Segment_target_tag                       1
#define Segment_duration_tag                     2
#define Profile_id_tag                           1
#define Profile_name_tag                         2
#define Profile_segments_tag                     3
#define ProfilesData_items_tag                   1
#define ProfilesData_selectedId_tag              2
#define Point_x_tag                              1
#define Point_y_tag                              2
#define HistoryChunk_type_tag                    1
#define HistoryChunk_version_tag                 2
#define HistoryChunk_data_tag                    3
#define HeadParams_sensor_p0_temperature_tag     1
#define HeadParams_sensor_p0_value_tag           2
#define HeadParams_sensor_p1_temperature_tag     3
#define HeadParams_sensor_p1_value_tag           4
#define HeadParams_adrc_response_tag             5
#define HeadParams_adrc_b0_tag                   6
#define HeadParams_adrc_N_tag                    7
#define HeadParams_adrc_M_tag                    8
#define DeviceInfo_health_tag                    1
#define DeviceInfo_activity_tag                  2
#define DeviceInfo_power_tag                     3
#define DeviceInfo_head_tag                      4
#define DeviceInfo_temperature_tag               5
#define DeviceInfo_watts_tag                     6
#define DeviceInfo_volts_tag                     7
#define DeviceInfo_amperes_tag                   8
#define DeviceInfo_max_watts_tag                 9
#define DeviceInfo_duty_cycle_tag                10
#define DeviceInfo_resistance_tag                11

/* Struct field encoding specification for nanopb */
#define Segment_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    target,            1) \
X(a, STATIC,   SINGULAR, INT32,    duration,          2)
#define Segment_CALLBACK NULL
#define Segment_DEFAULT NULL

#define Profile_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    id,                1) \
X(a, STATIC,   SINGULAR, STRING,   name,              2) \
X(a, STATIC,   REPEATED, MESSAGE,  segments,          3)
#define Profile_CALLBACK NULL
#define Profile_DEFAULT NULL
#define Profile_segments_MSGTYPE Segment

#define ProfilesData_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, MESSAGE,  items,             1) \
X(a, STATIC,   SINGULAR, INT32,    selectedId,        2)
#define ProfilesData_CALLBACK NULL
#define ProfilesData_DEFAULT NULL
#define ProfilesData_items_MSGTYPE Profile

#define Point_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    x,                 1) \
X(a, STATIC,   SINGULAR, FLOAT,    y,                 2)
#define Point_CALLBACK NULL
#define Point_DEFAULT NULL

#define HistoryChunk_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    type,              1) \
X(a, STATIC,   SINGULAR, INT32,    version,           2) \
X(a, STATIC,   REPEATED, MESSAGE,  data,              3)
#define HistoryChunk_CALLBACK NULL
#define HistoryChunk_DEFAULT NULL
#define HistoryChunk_data_MSGTYPE Point

#define HeadParams_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    sensor_p0_temperature,   1) \
X(a, STATIC,   SINGULAR, FLOAT,    sensor_p0_value,   2) \
X(a, STATIC,   SINGULAR, FLOAT,    sensor_p1_temperature,   3) \
X(a, STATIC,   SINGULAR, FLOAT,    sensor_p1_value,   4) \
X(a, STATIC,   SINGULAR, FLOAT,    adrc_response,     5) \
X(a, STATIC,   SINGULAR, FLOAT,    adrc_b0,           6) \
X(a, STATIC,   SINGULAR, FLOAT,    adrc_N,            7) \
X(a, STATIC,   SINGULAR, FLOAT,    adrc_M,            8)
#define HeadParams_CALLBACK NULL
#define HeadParams_DEFAULT NULL

#define DeviceInfo_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    health,            1) \
X(a, STATIC,   SINGULAR, UENUM,    activity,          2) \
X(a, STATIC,   SINGULAR, UENUM,    power,             3) \
X(a, STATIC,   SINGULAR, UENUM,    head,              4) \
X(a, STATIC,   SINGULAR, FLOAT,    temperature,       5) \
X(a, STATIC,   SINGULAR, FLOAT,    watts,             6) \
X(a, STATIC,   SINGULAR, FLOAT,    volts,             7) \
X(a, STATIC,   SINGULAR, FLOAT,    amperes,           8) \
X(a, STATIC,   SINGULAR, FLOAT,    max_watts,         9) \
X(a, STATIC,   SINGULAR, FLOAT,    duty_cycle,       10) \
X(a, STATIC,   SINGULAR, FLOAT,    resistance,       11)
#define DeviceInfo_CALLBACK NULL
#define DeviceInfo_DEFAULT NULL

extern const pb_msgdesc_t Segment_msg;
extern const pb_msgdesc_t Profile_msg;
extern const pb_msgdesc_t ProfilesData_msg;
extern const pb_msgdesc_t Point_msg;
extern const pb_msgdesc_t HistoryChunk_msg;
extern const pb_msgdesc_t HeadParams_msg;
extern const pb_msgdesc_t DeviceInfo_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Segment_fields &Segment_msg
#define Profile_fields &Profile_msg
#define ProfilesData_fields &ProfilesData_msg
#define Point_fields &Point_msg
#define HistoryChunk_fields &HistoryChunk_msg
#define HeadParams_fields &HeadParams_msg
#define DeviceInfo_fields &DeviceInfo_msg

/* Maximum encoded size of messages (where known) */
#define DeviceInfo_size                          43
#define HeadParams_size                          40
#define HistoryChunk_size                        1222
#define Point_size                               10
#define Profile_size                             303
#define ProfilesData_size                        3071
#define Segment_size                             22
#define TYPES_PB_H_MAX_SIZE                      ProfilesData_size

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
