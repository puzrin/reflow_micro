#pragma once

#include <stdint.h>

inline int32_t pt100_temp_x10(uint32_t R_mOhm) {
    // PT100 lookup table with linear interpolation. Source:
    // https://www.tnp-instruments.com/sitebuildercontent/sitebuilderfiles/pt100_385c_table.pdf

    static const struct {
        int16_t temp_x10;      // Temperature in 0.1Â°C
        uint32_t resistance;   // Resistance in milliohms
    } pt100_table[] = {
        {-200 * 10, 18520},
        {-190 * 10, 22826},
        {-180 * 10, 27096},
        {-170 * 10, 31335},
        {-160 * 10, 35543},
        {-150 * 10, 39723},
        {-140 * 10, 43876},
        {-130 * 10, 48005},
        {-120 * 10, 52110},
        {-110 * 10, 56193},
        {-100 * 10, 60256},
        {-90 * 10,  64300},
        {-80 * 10,  68325},
        {-70 * 10,  72335},
        {-60 * 10,  76328},
        {-50 * 10,  80306},
        {-40 * 10,  84271},
        {-30 * 10,  88222},
        {-20 * 10,  92160},
        {-10 * 10,  96086},
        {0 * 10,    100000},
        {10 * 10,   103903},
        {20 * 10,   107794},
        {30 * 10,   111673},
        {40 * 10,   115541},
        {50 * 10,   119397},
        {60 * 10,   123242},
        {70 * 10,   127075},
        {80 * 10,   130897},
        {90 * 10,   134707},
        {100 * 10,  138505},
        {110 * 10,  142293},
        {120 * 10,  146068},
        {130 * 10,  149832},
        {140 * 10,  153584},
        {150 * 10,  157325},
        {160 * 10,  161054},
        {170 * 10,  164772},
        {180 * 10,  168478},
        {190 * 10,  172173},
        {200 * 10,  175856},
        {210 * 10,  179528},
        {220 * 10,  183188},
        {230 * 10,  186836},
        {240 * 10,  190473},
        {250 * 10,  194098},
        {260 * 10,  197712},
        {270 * 10,  201314},
        {280 * 10,  204905},
        {290 * 10,  208484},
        {300 * 10,  212052},
        {310 * 10,  215608},
        {320 * 10,  219152},
        {330 * 10,  222685},
        {340 * 10,  226206},
        {350 * 10,  229716},
        {360 * 10,  233214},
        {370 * 10,  236701},
        {380 * 10,  240176},
        {390 * 10,  243640},
        {400 * 10,  247092},
        {410 * 10,  250533},
        {420 * 10,  253962},
        {430 * 10,  257379},
        {440 * 10,  260785},
        {450 * 10,  264179},
        {460 * 10,  267562},
        {470 * 10,  270933},
        {480 * 10,  274293},
        {490 * 10,  277641},
        {500 * 10,  280978},
        {510 * 10,  284303},
        {520 * 10,  287616},
        {530 * 10,  290918},
        {540 * 10,  294208},
        {550 * 10,  297487},
        {560 * 10,  300754},
        {570 * 10,  304010},
        {580 * 10,  307254},
        {590 * 10,  310487},
        {600 * 10,  313708},
        {610 * 10,  316918},
        {620 * 10,  320115},
        {630 * 10,  323302},
        {640 * 10,  326477},
        {650 * 10,  329640},
        {660 * 10,  332792},
        {670 * 10,  335932},
        {680 * 10,  339061},
        {690 * 10,  342178},
        {700 * 10,  345284},
        {710 * 10,  348378},
        {720 * 10,  351460},
        {730 * 10,  354531},
        {740 * 10,  357590},
        {750 * 10,  360638},
        {760 * 10,  363674},
        {770 * 10,  366699},
        {780 * 10,  369712},
        {790 * 10,  372714},
        {800 * 10,  375704},
        {810 * 10,  378683},
        {820 * 10,  381649},
        {830 * 10,  384605},
        {840 * 10,  387549},
        {850 * 10,  390481},
    };

    const int table_size = sizeof(pt100_table) / sizeof(pt100_table[0]);

    // Handle out of range cases
    if (R_mOhm <= pt100_table[0].resistance) {
        return pt100_table[0].temp_x10;
    }
    if (R_mOhm >= pt100_table[table_size-1].resistance) {
        return pt100_table[table_size-1].temp_x10;
    }

    // Find the two table entries that bracket our resistance value
    for (int i = 0; i < table_size - 1; i++) {
        if (R_mOhm >= pt100_table[i].resistance && R_mOhm <= pt100_table[i+1].resistance) {
            // Linear interpolation between table[i] and table[i+1]
            uint32_t R1 = pt100_table[i].resistance;
            uint32_t R2 = pt100_table[i+1].resistance;
            int32_t T1 = pt100_table[i].temp_x10;
            int32_t T2 = pt100_table[i+1].temp_x10;

            // T = T1 + (T2-T1) * (R-R1) / (R2-R1)
            int32_t temp_x10 = T1 + ((int64_t)(T2 - T1) * (int64_t)(R_mOhm - R1)) / (int64_t)(R2 - R1);

            return temp_x10;
        }
    }

    // Should never reach here
    return 0;
}
